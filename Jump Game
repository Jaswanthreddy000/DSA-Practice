class Solution {
    public boolean canJump(int[] nums) {
        HashMap<Integer,Boolean> hm = new HashMap<>();
       return jump(nums,0,hm);
    }

    public boolean jump(int []nums, int curr, HashMap<Integer,Boolean> hm)
    {
        if(curr == nums.length-1) return true;
        if(hm.containsKey(curr)) return hm.get(curr);
        if(curr >= nums.length) return false;
        boolean b= false;
        for(int i=1;i<=nums[curr];i++)
        {
           if(jump(nums,curr+i,hm))
           {
            b = true;
            break;
           } 
        }
        hm.put(curr, b);
        return b;
    }
}

solution 2
class Solution {
    public boolean canJump(int[] nums) {
    int reachable = 0;
    for(int i=0;i<nums.length;i++)
    {
        if(i > reachable) return false;
        reachable = Math.max(reachable, i+nums[i]);
    }
    return true;
    }

Solution 3
class Solution {
    public boolean canJump(int[] nums) {
    int reachable = 0;
    for(int i=0;i<nums.length;i++)
    {
        if(i>reachable)  return false;
        reachable = Math.max(reachable, i+nums[i]);
        if(reachable >= nums.length-1) return true;
    }
    return false;
    }

