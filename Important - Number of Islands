Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


dfs 

class Solution {
    public int numIslands(char[][] grid) {
        int count=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='1')
                {
                    island(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
     public void island(char [][]grid ,int i, int j)
     {
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]=='0') return ;
        grid[i][j]='0';
        island(grid,i+1,j);
        island(grid,i-1,j);
        island(grid,i,j+1);
        island(grid,i,j-1);
     }
}

bfs 

import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;

        // Iterate through the grid
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                // If a land cell is found, explore the entire island
                if (grid[i][j] == '1') {
                    bfs(grid, i, j);
                    count++; // Increment the island count
                }
            }
        }

        return count;
    }

    private void bfs(char[][] grid, int i, int j) {
        // Use a queue to explore the grid level by level
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{i, j});
        grid[i][j] = '0'; // Mark the starting cell as visited

        // Directions for moving up, down, left, and right
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];

            // Explore all 4 directions
            for (int[] dir : directions) {
                int newX = x + dir[0];
                int newY = y + dir[1];

                // Check if the new position is within bounds and is land
                if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[0].length && grid[newX][newY] == '1') {
                    queue.add(new int[]{newX, newY});
                    grid[newX][newY] = '0'; // Mark the cell as visited
                }
            }
        }
    }
}
