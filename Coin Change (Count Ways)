Coin Change (Count Ways)
Difficulty: MediumAccuracy: 43.1%Submissions: 274K+Points: 4
Given an integer array coins[ ] representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
Note: Assume that you have an infinite supply of each type of coin. And you can use any coin as many times as you want.
Answers are guaranteed to fit into a 32-bit integer. 

Examples:

Input: coins[] = [1, 2, 3], sum = 4
Output: 4
Explanation: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].
Input: coins[] = [2, 5, 3, 6], sum = 10
Output: 5
Explanation: Five Possible ways are: [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].
Input: coins[] = [5, 10], sum = 3
Output: 0
Explanation: Since all coin denominations are greater than sum, no combination can make the target sum.

Solution

class Solution {
    public int count(int coins[], int sum) {
        // code here.
        int l = coins.length;
        int [][]mem = new int[l][sum+1];
        for(int i=0;i<l;i++)
        {
            for(int j=0;j<sum+1;j++) 
              mem[i][j] = -1;
        }
        return ways(coins,sum,0,mem);
    }
    
    public int ways(int []coins, int sum, int curr, int [][]mem)
    {
        if(sum==0) return 1;
        if(curr>= coins.length || sum<0) return 0;
        if(mem[curr][sum] !=-1) return mem[curr][sum];
        
        return mem[curr][sum] = ways(coins,sum-coins[curr],curr,mem) + ways(coins,sum,curr+1,mem);
        
    }
}
